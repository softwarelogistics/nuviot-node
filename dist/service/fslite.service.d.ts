import { Observable } from 'rxjs/Observable';
import { NuviotClientService } from './nuviot-client.service';
export declare class FsliteService {
    private nuviotClient;
    private _templates;
    private _template;
    private _tickets;
    private _ticket;
    private _boards;
    private _board;
    private _partsKit;
    private _templates$;
    private _template$;
    private _board$;
    private _boards$;
    private _tickets$;
    private _ticket$;
    private _partsKit$;
    constructor(nuviotClient: NuviotClientService);
    loadTickets(nextRowKey?: string): Promise<Core.ListResponse<FSLite.ServiceTicketSummary>>;
    loadTicketsForBoard(boardId: string, nextRowKey?: string): Promise<Core.ListResponse<FSLite.ServiceTicketSummary>>;
    loadTicketsForDevice(deviceId: string, nextRowKey?: string): Promise<Core.ListResponse<FSLite.ServiceTicketSummary>>;
    loadTicketsWithFilter(filter: FSLite.TicketFilter): Promise<Core.ListResponse<FSLite.ServiceTicketSummary>>;
    loadTemplate(id: string): Promise<FSLite.ServiceTicketTemplate>;
    loadBoards(): Promise<FSLite.ServiceBoard[]>;
    loadTemplates(): Promise<FSLite.ServiceTicketTemplateSummary[]>;
    createTicket(ticketRequest: FSLite.CreateServiceTicketRequest): Promise<FSLite.ServiceTicket>;
    addTicketNote(ticketId: string, note: FSLite.ServiceTicketNote): Promise<FSLite.ServiceTicket>;
    changeTicketStatus(ticketId: string, note: Core.EntityHeader): Promise<FSLite.ServiceTicket>;
    setTicketViewedStatus(ticketId: string, viewedStatus: boolean): Promise<FSLite.ServiceTicket>;
    setTicketClosedStatus(ticketId: string, closedStatus: boolean): Promise<FSLite.ServiceTicket>;
    loadTicket(ticketId: string): Promise<FSLite.ServiceTicket>;
    loadPartsKit(partsKitId: string): Promise<FSLite.PartsKit>;
    updateAssignedTo(ticketId: string, assignedTo: Core.EntityHeader): Promise<FSLite.ServiceTicket>;
    deleteTicket(ticketId: string): Promise<Core.InvokeResult>;
    onPartsKit(): Observable<FSLite.PartsKit>;
    onBoard(): Observable<FSLite.ServiceBoard>;
    onBoards(): Observable<FSLite.ServiceBoard[]>;
    onTicket(): Observable<FSLite.ServiceTicket>;
    onTickets(): Observable<FSLite.ServiceTicketSummary[]>;
    onTemplates(): Observable<FSLite.ServiceTicketTemplateSummary[]>;
    onTemplate(): Observable<FSLite.ServiceTicketTemplate>;
    setBoard(board: FSLite.ServiceBoard): void;
    setBoards(boards: FSLite.ServiceBoard[]): void;
    setTemplate(template: FSLite.ServiceTicketTemplate): void;
    setTicket(ticket: FSLite.ServiceTicket): void;
    setTickets(tickets: FSLite.ServiceTicketSummary[]): void;
    setTemplates(templats: FSLite.ServiceTicketTemplateSummary[]): void;
    setPartsKit(partsKit: FSLite.PartsKit): void;
    getBoard(): FSLite.ServiceBoard;
    getBoards(): FSLite.ServiceBoard[];
    getTicket(): FSLite.ServiceTicket;
    getTickets(): FSLite.ServiceTicketSummary[];
    getTemplateSummaries(): FSLite.ServiceTicketTemplateSummary[];
    getPartsKit(): FSLite.PartsKit;
}
