import { CookieService } from '../core/utils';
import { NuviotClientService } from './nuviot-client.service';
export declare class BusinessService {
    private nuviotClient;
    private cookieService;
    constructor(nuviotClient: NuviotClientService, cookieService: CookieService);
    getTimeEntriesForTask(start: string, end: string, taskId: string, userId: string): Promise<Core.ListResponse<Business.TimeEntry>>;
    getTimeEntriesForUser(start: string, end: string, userId: string): Promise<Core.ListResponse<Business.TimeEntry>>;
    addTimeEntry(timeRecord: Business.NewTimeEntry): Promise<Core.InvokeResultEx<Business.TimeEntry>>;
    updateTimeEntry(timeRecord: Business.TimeEntryUpdate): Promise<Core.InvokeResultEx<Business.TimeEntry>>;
    deleteTimeEntry(id: string): Promise<Core.InvokeResult>;
    getExpensesForTask(start: string, end: string, taskId: string, userId: string): Promise<Core.ListResponse<Business.Expense>>;
    getExpensesForUser(start: string, end: string, userId: string): Promise<Core.ListResponse<Business.Expense>>;
    addExpenses(expense: Business.Expense): Promise<Core.InvokeResultEx<Business.Expense>>;
    updateExpenses(expense: Business.Expense): Promise<Core.InvokeResultEx<Business.Expense>>;
    deleteExpenses(expenseId: Business.Expense): Promise<Core.InvokeResult>;
    getTimePeriods(year: Number): Promise<Core.ListResponse<Business.TimePeriod>>;
    getAllTimePeriods(): Promise<Core.ListResponse<Business.TimePeriod>>;
    createTimePeriods(year: Number): Promise<Core.ListResponse<Business.TimePeriod>>;
    getCustomers(): Promise<Core.ListResponse<Business.Customer>>;
    saveCustomer(customer: Business.Customer): Promise<Core.InvokeResultEx<Business.Customer>>;
    getCustomer(customerId: string): Promise<Core.InvokeResultEx<Business.Customer>>;
    deleteCustomer(customerId: string): Promise<Core.InvokeResult>;
    getActiveAgreements(customerId: string): Promise<Core.ListResponse<Business.Agreement>>;
    getAgreements(customerId: string): Promise<Core.ListResponse<Business.Agreement>>;
    getActiveAgreementSummaries(customerId: string): Promise<Core.ListResponse<Business.AgreementSummary>>;
    getAgreementSummaries(customerId: string): Promise<Core.ListResponse<Business.AgreementSummary>>;
    getAgreement(id: string): Promise<Core.InvokeResultEx<Business.Agreement>>;
    saveAgreement(agreement: Business.Agreement): Promise<Core.InvokeResultEx<Business.Agreement>>;
    deleteAgreement(agreementId: string): Promise<Core.InvokeResult>;
    getCurrentPayRate(userId: string): Promise<Core.InvokeResultEx<Business.PayRate>>;
    getUserPayRates(userId: string): Promise<Core.ListResponse<Business.PayRate>>;
    getPayRate(id: string): Promise<Core.InvokeResultEx<Business.PayRate>>;
    savePayRate(payRate: Business.PayRate): Promise<Core.InvokeResultEx<Business.PayRate[]>>;
    deletePayRate(payRateId: string): Promise<Core.InvokeResult>;
    getTimeReport(filter: Business.TimeReportFilter): Promise<Core.InvokeResultEx<Business.TimeReportData>>;
    downloadExcel(filter: Business.TimeReportFilter): void;
    lockTimePeriod(id: string): Promise<Core.InvokeResultEx<Business.TimePeriod>>;
    unlockTimePeriod(id: string): Promise<Core.InvokeResultEx<Business.TimePeriod>>;
}
