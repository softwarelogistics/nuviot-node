/// <reference path="../models/ui.d.ts" />
import { Observable } from 'rxjs';
import { NuviotClientService } from './nuviot-client.service';
import { Router } from '../core/utils';
export declare class UiService {
    private client;
    private router;
    apps: UI.IoTApp[];
    private _currentAppsList$;
    currentApp: UI.IoTApp;
    private _currentApp$;
    private _dashboards;
    private _currentViewKey;
    private _currentDashboardKey;
    private _currentDashboard;
    private _currentView;
    private _dateRange;
    kiosks: UI.Kiosk[];
    private _currentKiosksList$;
    private _currentKioskKey;
    private _currentKioskViewKey;
    private _kioskViews;
    private _kioskViews$;
    currentKiosk: UI.Kiosk;
    private _currentKiosk$;
    _currentKioskView: UI.View;
    private _currentKioskView$;
    private _dateRange$;
    private _currentDashboard$;
    private _currentView$;
    private _dashboards$;
    private _addedWidgets$;
    constructor(client: NuviotClientService, router: Router);
    deviceRepoAppId: 'C377AD9D1FBE49F99BBCDE0F75BA1F7E';
    createView(): UI.View;
    newId(): string;
    createDashboard(): Promise<UI.Dashboard>;
    loadDashboards(appId: string, dashboardKey?: string, viewKey?: string, app?: UI.IoTApp): Promise<UI.Dashboard[]>;
    loadAllDashboards(): Promise<UI.Dashboard[]>;
    setApp(appId: string, dashboardKey?: string, viewKey?: string): void;
    loadApps(appId?: string, dashboardKey?: string, viewKey?: string): Promise<UI.IoTApp[]>;
    loadApp(appId: string, dashboardKey?: string, viewKey?: string): Promise<UI.IoTApp>;
    getApp(appId: string): Promise<Core.InvokeResultEx<UI.IoTApp>>;
    createApp(): Promise<Core.InvokeResultEx<UI.IoTApp>>;
    insertApp(app: UI.IoTApp): Promise<Core.InvokeResult>;
    updateApp(app: UI.IoTApp): Promise<Core.InvokeResult>;
    deleteApp(appId: string): Promise<Core.InvokeResult>;
    insertDashboard(dashboard: UI.Dashboard): Promise<Core.InvokeResult>;
    getDashboard(id: string): UI.Dashboard;
    setCurrentView(dashboardKey: string, viewKey: string): void;
    updateDashboard(dashboard: UI.Dashboard): Promise<Core.InvokeResult>;
    updateCurrentDashboard(): Promise<Core.InvokeResult>;
    removeViewById(dashboard: UI.Dashboard, viewKey: string): Promise<Core.InvokeResult>;
    navigateToAppsHome(): void;
    navigateToKiosksHome(): void;
    returnToCurrentView(): void;
    addWidgetToCurrentView(widgetTemplate: UI.WidgetTemplate): void;
    createWidget(name: string, help: string, key: string): Promise<UI.WidgetTemplate>;
    insertWidget(widget: UI.WidgetTemplate): Promise<Core.InvokeResult>;
    updateWidget(widget: UI.WidgetTemplate): Promise<Core.InvokeResult>;
    onWidgetAddedToView(): Observable<UI.ViewWidget>;
    removeWidgetById(id: string): void;
    reorderWidgets(ids: Array<string>): void;
    getWidgets(dashboardId: string, viewKey: string): Promise<Core.ListResponse<UI.WidgetTemplate>>;
    onDashboards(): Observable<UI.Dashboard[]>;
    getDashboards(): UI.Dashboard[];
    removeDashboardById(id: string): Promise<Core.InvokeResult>;
    deviceSelected(repoid: string, deviceId: string): void;
    clearApp(): void;
    clearView(): void;
    onDateRangeChanged(): Observable<Core.DateRange>;
    getDateRange(): Core.DateRange;
    setDateRange(start?: Date, end?: Date): void;
    onAppsLoaded(): Observable<UI.IoTApp[]>;
    onCurrentApp(): Observable<UI.IoTApp>;
    onCurrentDashboard(): Observable<UI.Dashboard>;
    getCurrentDashboard(): UI.Dashboard;
    setCurrentDashboard(dashboard: UI.Dashboard): void;
    onCurrentView(): Observable<UI.View>;
    getCurrentView(): UI.View;
    loadKioskViews(kioskId: string, viewKey?: string, kiosk?: UI.Kiosk): Promise<UI.View[]>;
    setCurrentKioskView(kioskKey: string, viewKey: string): void;
    setKiosk(kioskId: string, viewKey?: string): void;
    loadKiosks(kioskId?: string, viewKey?: string): Promise<UI.Kiosk[]>;
    loadKiosk(kioskId: string, viewKey?: string): Promise<UI.Kiosk>;
    getKiosk(kioskId: string): Promise<Core.InvokeResultEx<UI.Kiosk>>;
    createKiosk(): Promise<Core.InvokeResultEx<UI.Kiosk>>;
    insertKiosk(newKiosk: UI.Kiosk): Promise<Core.InvokeResult>;
    updateKiosk(targetKiosk: UI.Kiosk): Promise<Core.InvokeResult>;
    deleteKiosk(kioskId: string): Promise<Core.InvokeResult>;
}
